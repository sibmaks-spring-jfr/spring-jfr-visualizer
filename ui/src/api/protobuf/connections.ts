// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: connections.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "io.github.sibmaks.spring.jfr.dto.protobuf.connections";

export interface ConnectionException {
  type: number;
  message: number;
}

export interface ConnectionEvent {
  index: number;
  action: number;
  exception: ConnectionException | undefined;
  startedAt: number;
  finishedAt: number;
  threadName: number;
  transactionIsolation?: number | undefined;
}

export interface Connection {
  events: ConnectionEvent[];
  id: string;
  duration: number;
  hasExceptions: boolean;
}

export interface ConnectionList {
  connections: Connection[];
}

export interface ConnectionMap {
  connections: { [key: number]: ConnectionList };
}

export interface ConnectionMap_ConnectionsEntry {
  key: number;
  value: ConnectionList | undefined;
}

export interface ConnectionsReport {
  contexts: { [key: number]: ConnectionMap };
}

export interface ConnectionsReport_ContextsEntry {
  key: number;
  value: ConnectionMap | undefined;
}

function createBaseConnectionException(): ConnectionException {
  return { type: 0, message: 0 };
}

export const ConnectionException: MessageFns<ConnectionException> = {
  encode(message: ConnectionException, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int64(message.type);
    }
    if (message.message !== 0) {
      writer.uint32(16).int64(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectionException {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectionException();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.message = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectionException {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      message: isSet(object.message) ? globalThis.Number(object.message) : 0,
    };
  },

  toJSON(message: ConnectionException): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.message !== 0) {
      obj.message = Math.round(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectionException>, I>>(base?: I): ConnectionException {
    return ConnectionException.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectionException>, I>>(object: I): ConnectionException {
    const message = createBaseConnectionException();
    message.type = object.type ?? 0;
    message.message = object.message ?? 0;
    return message;
  },
};

function createBaseConnectionEvent(): ConnectionEvent {
  return {
    index: 0,
    action: 0,
    exception: undefined,
    startedAt: 0,
    finishedAt: 0,
    threadName: 0,
    transactionIsolation: undefined,
  };
}

export const ConnectionEvent: MessageFns<ConnectionEvent> = {
  encode(message: ConnectionEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== 0) {
      writer.uint32(8).int64(message.index);
    }
    if (message.action !== 0) {
      writer.uint32(16).int64(message.action);
    }
    if (message.exception !== undefined) {
      ConnectionException.encode(message.exception, writer.uint32(26).fork()).join();
    }
    if (message.startedAt !== 0) {
      writer.uint32(32).int64(message.startedAt);
    }
    if (message.finishedAt !== 0) {
      writer.uint32(40).int64(message.finishedAt);
    }
    if (message.threadName !== 0) {
      writer.uint32(48).int64(message.threadName);
    }
    if (message.transactionIsolation !== undefined) {
      writer.uint32(56).int32(message.transactionIsolation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectionEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectionEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.index = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.action = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.exception = ConnectionException.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.startedAt = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.finishedAt = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.threadName = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.transactionIsolation = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectionEvent {
    return {
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      action: isSet(object.action) ? globalThis.Number(object.action) : 0,
      exception: isSet(object.exception) ? ConnectionException.fromJSON(object.exception) : undefined,
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      finishedAt: isSet(object.finishedAt) ? globalThis.Number(object.finishedAt) : 0,
      threadName: isSet(object.threadName) ? globalThis.Number(object.threadName) : 0,
      transactionIsolation: isSet(object.transactionIsolation)
        ? globalThis.Number(object.transactionIsolation)
        : undefined,
    };
  },

  toJSON(message: ConnectionEvent): unknown {
    const obj: any = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.action !== 0) {
      obj.action = Math.round(message.action);
    }
    if (message.exception !== undefined) {
      obj.exception = ConnectionException.toJSON(message.exception);
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.finishedAt !== 0) {
      obj.finishedAt = Math.round(message.finishedAt);
    }
    if (message.threadName !== 0) {
      obj.threadName = Math.round(message.threadName);
    }
    if (message.transactionIsolation !== undefined) {
      obj.transactionIsolation = Math.round(message.transactionIsolation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectionEvent>, I>>(base?: I): ConnectionEvent {
    return ConnectionEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectionEvent>, I>>(object: I): ConnectionEvent {
    const message = createBaseConnectionEvent();
    message.index = object.index ?? 0;
    message.action = object.action ?? 0;
    message.exception = (object.exception !== undefined && object.exception !== null)
      ? ConnectionException.fromPartial(object.exception)
      : undefined;
    message.startedAt = object.startedAt ?? 0;
    message.finishedAt = object.finishedAt ?? 0;
    message.threadName = object.threadName ?? 0;
    message.transactionIsolation = object.transactionIsolation ?? undefined;
    return message;
  },
};

function createBaseConnection(): Connection {
  return { events: [], id: "", duration: 0, hasExceptions: false };
}

export const Connection: MessageFns<Connection> = {
  encode(message: Connection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      ConnectionEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.duration !== 0) {
      writer.uint32(24).int64(message.duration);
    }
    if (message.hasExceptions !== false) {
      writer.uint32(32).bool(message.hasExceptions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Connection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.events.push(ConnectionEvent.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.duration = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.hasExceptions = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Connection {
    return {
      events: globalThis.Array.isArray(object?.events)
        ? object.events.map((e: any) => ConnectionEvent.fromJSON(e))
        : [],
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
      hasExceptions: isSet(object.hasExceptions) ? globalThis.Boolean(object.hasExceptions) : false,
    };
  },

  toJSON(message: Connection): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => ConnectionEvent.toJSON(e));
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.duration !== 0) {
      obj.duration = Math.round(message.duration);
    }
    if (message.hasExceptions !== false) {
      obj.hasExceptions = message.hasExceptions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Connection>, I>>(base?: I): Connection {
    return Connection.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Connection>, I>>(object: I): Connection {
    const message = createBaseConnection();
    message.events = object.events?.map((e) => ConnectionEvent.fromPartial(e)) || [];
    message.id = object.id ?? "";
    message.duration = object.duration ?? 0;
    message.hasExceptions = object.hasExceptions ?? false;
    return message;
  },
};

function createBaseConnectionList(): ConnectionList {
  return { connections: [] };
}

export const ConnectionList: MessageFns<ConnectionList> = {
  encode(message: ConnectionList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.connections) {
      Connection.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectionList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectionList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.connections.push(Connection.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectionList {
    return {
      connections: globalThis.Array.isArray(object?.connections)
        ? object.connections.map((e: any) => Connection.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ConnectionList): unknown {
    const obj: any = {};
    if (message.connections?.length) {
      obj.connections = message.connections.map((e) => Connection.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectionList>, I>>(base?: I): ConnectionList {
    return ConnectionList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectionList>, I>>(object: I): ConnectionList {
    const message = createBaseConnectionList();
    message.connections = object.connections?.map((e) => Connection.fromPartial(e)) || [];
    return message;
  },
};

function createBaseConnectionMap(): ConnectionMap {
  return { connections: {} };
}

export const ConnectionMap: MessageFns<ConnectionMap> = {
  encode(message: ConnectionMap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.connections).forEach(([key, value]) => {
      ConnectionMap_ConnectionsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectionMap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectionMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = ConnectionMap_ConnectionsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.connections[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectionMap {
    return {
      connections: isObject(object.connections)
        ? Object.entries(object.connections).reduce<{ [key: number]: ConnectionList }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = ConnectionList.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ConnectionMap): unknown {
    const obj: any = {};
    if (message.connections) {
      const entries = Object.entries(message.connections);
      if (entries.length > 0) {
        obj.connections = {};
        entries.forEach(([k, v]) => {
          obj.connections[k] = ConnectionList.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectionMap>, I>>(base?: I): ConnectionMap {
    return ConnectionMap.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectionMap>, I>>(object: I): ConnectionMap {
    const message = createBaseConnectionMap();
    message.connections = Object.entries(object.connections ?? {}).reduce<{ [key: number]: ConnectionList }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = ConnectionList.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseConnectionMap_ConnectionsEntry(): ConnectionMap_ConnectionsEntry {
  return { key: 0, value: undefined };
}

export const ConnectionMap_ConnectionsEntry: MessageFns<ConnectionMap_ConnectionsEntry> = {
  encode(message: ConnectionMap_ConnectionsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== undefined) {
      ConnectionList.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectionMap_ConnectionsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectionMap_ConnectionsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = ConnectionList.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectionMap_ConnectionsEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? ConnectionList.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ConnectionMap_ConnectionsEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = ConnectionList.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectionMap_ConnectionsEntry>, I>>(base?: I): ConnectionMap_ConnectionsEntry {
    return ConnectionMap_ConnectionsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectionMap_ConnectionsEntry>, I>>(
    object: I,
  ): ConnectionMap_ConnectionsEntry {
    const message = createBaseConnectionMap_ConnectionsEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? ConnectionList.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseConnectionsReport(): ConnectionsReport {
  return { contexts: {} };
}

export const ConnectionsReport: MessageFns<ConnectionsReport> = {
  encode(message: ConnectionsReport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.contexts).forEach(([key, value]) => {
      ConnectionsReport_ContextsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectionsReport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectionsReport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = ConnectionsReport_ContextsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.contexts[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectionsReport {
    return {
      contexts: isObject(object.contexts)
        ? Object.entries(object.contexts).reduce<{ [key: number]: ConnectionMap }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = ConnectionMap.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ConnectionsReport): unknown {
    const obj: any = {};
    if (message.contexts) {
      const entries = Object.entries(message.contexts);
      if (entries.length > 0) {
        obj.contexts = {};
        entries.forEach(([k, v]) => {
          obj.contexts[k] = ConnectionMap.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectionsReport>, I>>(base?: I): ConnectionsReport {
    return ConnectionsReport.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectionsReport>, I>>(object: I): ConnectionsReport {
    const message = createBaseConnectionsReport();
    message.contexts = Object.entries(object.contexts ?? {}).reduce<{ [key: number]: ConnectionMap }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = ConnectionMap.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseConnectionsReport_ContextsEntry(): ConnectionsReport_ContextsEntry {
  return { key: 0, value: undefined };
}

export const ConnectionsReport_ContextsEntry: MessageFns<ConnectionsReport_ContextsEntry> = {
  encode(message: ConnectionsReport_ContextsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== undefined) {
      ConnectionMap.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectionsReport_ContextsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectionsReport_ContextsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = ConnectionMap.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectionsReport_ContextsEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? ConnectionMap.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ConnectionsReport_ContextsEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = ConnectionMap.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectionsReport_ContextsEntry>, I>>(base?: I): ConnectionsReport_ContextsEntry {
    return ConnectionsReport_ContextsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectionsReport_ContextsEntry>, I>>(
    object: I,
  ): ConnectionsReport_ContextsEntry {
    const message = createBaseConnectionsReport_ContextsEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? ConnectionMap.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
