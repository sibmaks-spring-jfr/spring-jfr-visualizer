// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: calls.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "io.github.sibmaks.spring.jfr.dto.protobuf.calls";

export interface CallTrace {
  invocationId: number;
  success: number;
  type: number;
  startTime: number;
  endTime: number;
  threadName: number;
  className: number;
  methodName: number;
  details: { [key: number]: number };
  children: CallTrace[];
}

export interface CallTrace_DetailsEntry {
  key: number;
  value: number;
}

export interface CallTraceList {
  callTraces: CallTrace[];
}

export interface CallsReport {
  contexts: { [key: number]: CallTraceList };
}

export interface CallsReport_ContextsEntry {
  key: number;
  value: CallTraceList | undefined;
}

function createBaseCallTrace(): CallTrace {
  return {
    invocationId: 0,
    success: 0,
    type: 0,
    startTime: 0,
    endTime: 0,
    threadName: 0,
    className: 0,
    methodName: 0,
    details: {},
    children: [],
  };
}

export const CallTrace: MessageFns<CallTrace> = {
  encode(message: CallTrace, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.invocationId !== 0) {
      writer.uint32(8).int64(message.invocationId);
    }
    if (message.success !== 0) {
      writer.uint32(16).int32(message.success);
    }
    if (message.type !== 0) {
      writer.uint32(24).int64(message.type);
    }
    if (message.startTime !== 0) {
      writer.uint32(32).int64(message.startTime);
    }
    if (message.endTime !== 0) {
      writer.uint32(40).int64(message.endTime);
    }
    if (message.threadName !== 0) {
      writer.uint32(48).int64(message.threadName);
    }
    if (message.className !== 0) {
      writer.uint32(56).int64(message.className);
    }
    if (message.methodName !== 0) {
      writer.uint32(64).int64(message.methodName);
    }
    Object.entries(message.details).forEach(([key, value]) => {
      CallTrace_DetailsEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    for (const v of message.children) {
      CallTrace.encode(v!, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CallTrace {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallTrace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.invocationId = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.startTime = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.endTime = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.threadName = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.className = longToNumber(reader.int64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.methodName = longToNumber(reader.int64());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          const entry9 = CallTrace_DetailsEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.details[entry9.key] = entry9.value;
          }
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.children.push(CallTrace.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallTrace {
    return {
      invocationId: isSet(object.invocationId) ? globalThis.Number(object.invocationId) : 0,
      success: isSet(object.success) ? globalThis.Number(object.success) : 0,
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      startTime: isSet(object.startTime) ? globalThis.Number(object.startTime) : 0,
      endTime: isSet(object.endTime) ? globalThis.Number(object.endTime) : 0,
      threadName: isSet(object.threadName) ? globalThis.Number(object.threadName) : 0,
      className: isSet(object.className) ? globalThis.Number(object.className) : 0,
      methodName: isSet(object.methodName) ? globalThis.Number(object.methodName) : 0,
      details: isObject(object.details)
        ? Object.entries(object.details).reduce<{ [key: number]: number }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = Number(value);
          return acc;
        }, {})
        : {},
      children: globalThis.Array.isArray(object?.children)
        ? object.children.map((e: any) => CallTrace.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CallTrace): unknown {
    const obj: any = {};
    if (message.invocationId !== 0) {
      obj.invocationId = Math.round(message.invocationId);
    }
    if (message.success !== 0) {
      obj.success = Math.round(message.success);
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.startTime !== 0) {
      obj.startTime = Math.round(message.startTime);
    }
    if (message.endTime !== 0) {
      obj.endTime = Math.round(message.endTime);
    }
    if (message.threadName !== 0) {
      obj.threadName = Math.round(message.threadName);
    }
    if (message.className !== 0) {
      obj.className = Math.round(message.className);
    }
    if (message.methodName !== 0) {
      obj.methodName = Math.round(message.methodName);
    }
    if (message.details) {
      const entries = Object.entries(message.details);
      if (entries.length > 0) {
        obj.details = {};
        entries.forEach(([k, v]) => {
          obj.details[k] = Math.round(v);
        });
      }
    }
    if (message.children?.length) {
      obj.children = message.children.map((e) => CallTrace.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CallTrace>, I>>(base?: I): CallTrace {
    return CallTrace.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CallTrace>, I>>(object: I): CallTrace {
    const message = createBaseCallTrace();
    message.invocationId = object.invocationId ?? 0;
    message.success = object.success ?? 0;
    message.type = object.type ?? 0;
    message.startTime = object.startTime ?? 0;
    message.endTime = object.endTime ?? 0;
    message.threadName = object.threadName ?? 0;
    message.className = object.className ?? 0;
    message.methodName = object.methodName ?? 0;
    message.details = Object.entries(object.details ?? {}).reduce<{ [key: number]: number }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = globalThis.Number(value);
      }
      return acc;
    }, {});
    message.children = object.children?.map((e) => CallTrace.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCallTrace_DetailsEntry(): CallTrace_DetailsEntry {
  return { key: 0, value: 0 };
}

export const CallTrace_DetailsEntry: MessageFns<CallTrace_DetailsEntry> = {
  encode(message: CallTrace_DetailsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int64(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CallTrace_DetailsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallTrace_DetailsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallTrace_DetailsEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: CallTrace_DetailsEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CallTrace_DetailsEntry>, I>>(base?: I): CallTrace_DetailsEntry {
    return CallTrace_DetailsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CallTrace_DetailsEntry>, I>>(object: I): CallTrace_DetailsEntry {
    const message = createBaseCallTrace_DetailsEntry();
    message.key = object.key ?? 0;
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseCallTraceList(): CallTraceList {
  return { callTraces: [] };
}

export const CallTraceList: MessageFns<CallTraceList> = {
  encode(message: CallTraceList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.callTraces) {
      CallTrace.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CallTraceList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallTraceList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.callTraces.push(CallTrace.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallTraceList {
    return {
      callTraces: globalThis.Array.isArray(object?.callTraces)
        ? object.callTraces.map((e: any) => CallTrace.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CallTraceList): unknown {
    const obj: any = {};
    if (message.callTraces?.length) {
      obj.callTraces = message.callTraces.map((e) => CallTrace.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CallTraceList>, I>>(base?: I): CallTraceList {
    return CallTraceList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CallTraceList>, I>>(object: I): CallTraceList {
    const message = createBaseCallTraceList();
    message.callTraces = object.callTraces?.map((e) => CallTrace.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCallsReport(): CallsReport {
  return { contexts: {} };
}

export const CallsReport: MessageFns<CallsReport> = {
  encode(message: CallsReport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.contexts).forEach(([key, value]) => {
      CallsReport_ContextsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CallsReport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallsReport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = CallsReport_ContextsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.contexts[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallsReport {
    return {
      contexts: isObject(object.contexts)
        ? Object.entries(object.contexts).reduce<{ [key: number]: CallTraceList }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = CallTraceList.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: CallsReport): unknown {
    const obj: any = {};
    if (message.contexts) {
      const entries = Object.entries(message.contexts);
      if (entries.length > 0) {
        obj.contexts = {};
        entries.forEach(([k, v]) => {
          obj.contexts[k] = CallTraceList.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CallsReport>, I>>(base?: I): CallsReport {
    return CallsReport.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CallsReport>, I>>(object: I): CallsReport {
    const message = createBaseCallsReport();
    message.contexts = Object.entries(object.contexts ?? {}).reduce<{ [key: number]: CallTraceList }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = CallTraceList.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseCallsReport_ContextsEntry(): CallsReport_ContextsEntry {
  return { key: 0, value: undefined };
}

export const CallsReport_ContextsEntry: MessageFns<CallsReport_ContextsEntry> = {
  encode(message: CallsReport_ContextsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== undefined) {
      CallTraceList.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CallsReport_ContextsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallsReport_ContextsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = CallTraceList.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallsReport_ContextsEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? CallTraceList.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: CallsReport_ContextsEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = CallTraceList.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CallsReport_ContextsEntry>, I>>(base?: I): CallsReport_ContextsEntry {
    return CallsReport_ContextsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CallsReport_ContextsEntry>, I>>(object: I): CallsReport_ContextsEntry {
    const message = createBaseCallsReport_ContextsEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? CallTraceList.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
