// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kafka.consumer.proto
// Protobuf Java Version: 4.29.3

package io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer;

/**
 * Protobuf type {@code io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer}
 */
public final class KafkaConsumer extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer)
    KafkaConsumerOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      KafkaConsumer.class.getName());
  }
  // Use KafkaConsumer.newBuilder() to construct.
  private KafkaConsumer(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private KafkaConsumer() {
    topics_ = emptyIntList();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerOuterClass.internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumer_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
      int number) {
    switch (number) {
      case 6:
        return internalGetPartitions();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerOuterClass.internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumer_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer.class, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer.Builder.class);
  }

  private int bitField0_;
  public static final int CONSUMER_FACTORY_FIELD_NUMBER = 1;
  private int consumerFactory_ = 0;
  /**
   * <code>int32 consumer_factory = 1;</code>
   * @return The consumerFactory.
   */
  @java.lang.Override
  public int getConsumerFactory() {
    return consumerFactory_;
  }

  public static final int CONSUMER_ID_FIELD_NUMBER = 2;
  private int consumerId_ = 0;
  /**
   * <code>int32 consumer_id = 2;</code>
   * @return The consumerId.
   */
  @java.lang.Override
  public int getConsumerId() {
    return consumerId_;
  }

  public static final int BOOTSTRAP_SERVERS_FIELD_NUMBER = 3;
  private int bootstrapServers_ = 0;
  /**
   * <code>int32 bootstrap_servers = 3;</code>
   * @return The bootstrapServers.
   */
  @java.lang.Override
  public int getBootstrapServers() {
    return bootstrapServers_;
  }

  public static final int CONSUMER_GROUP_FIELD_NUMBER = 4;
  private int consumerGroup_ = 0;
  /**
   * <code>int32 consumer_group = 4;</code>
   * @return The consumerGroup.
   */
  @java.lang.Override
  public int getConsumerGroup() {
    return consumerGroup_;
  }

  public static final int TOPICS_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.IntList topics_ =
      emptyIntList();
  /**
   * <code>repeated int32 topics = 5;</code>
   * @return A list containing the topics.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getTopicsList() {
    return topics_;
  }
  /**
   * <code>repeated int32 topics = 5;</code>
   * @return The count of topics.
   */
  public int getTopicsCount() {
    return topics_.size();
  }
  /**
   * <code>repeated int32 topics = 5;</code>
   * @param index The index of the element to return.
   * @return The topics at the given index.
   */
  public int getTopics(int index) {
    return topics_.getInt(index);
  }
  private int topicsMemoizedSerializedSize = -1;

  public static final int PARTITIONS_FIELD_NUMBER = 6;
  private static final class PartitionsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets>newDefaultInstance(
                io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerOuterClass.internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumer_PartitionsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.INT32,
                0,
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets> partitions_;
  private com.google.protobuf.MapField<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets>
  internalGetPartitions() {
    if (partitions_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          PartitionsDefaultEntryHolder.defaultEntry);
    }
    return partitions_;
  }
  public int getPartitionsCount() {
    return internalGetPartitions().getMap().size();
  }
  /**
   * <code>map&lt;int32, .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets&gt; partitions = 6;</code>
   */
  @java.lang.Override
  public boolean containsPartitions(
      int key) {

    return internalGetPartitions().getMap().containsKey(key);
  }
  /**
   * Use {@link #getPartitionsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets> getPartitions() {
    return getPartitionsMap();
  }
  /**
   * <code>map&lt;int32, .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets&gt; partitions = 6;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets> getPartitionsMap() {
    return internalGetPartitions().getMap();
  }
  /**
   * <code>map&lt;int32, .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets&gt; partitions = 6;</code>
   */
  @java.lang.Override
  public /* nullable */
io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets getPartitionsOrDefault(
      int key,
      /* nullable */
io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets defaultValue) {

    java.util.Map<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets> map =
        internalGetPartitions().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;int32, .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets&gt; partitions = 6;</code>
   */
  @java.lang.Override
  public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets getPartitionsOrThrow(
      int key) {

    java.util.Map<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets> map =
        internalGetPartitions().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int STATS_FIELD_NUMBER = 7;
  private io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats stats_;
  /**
   * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats stats = 7;</code>
   * @return Whether the stats field is set.
   */
  @java.lang.Override
  public boolean hasStats() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats stats = 7;</code>
   * @return The stats.
   */
  @java.lang.Override
  public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats getStats() {
    return stats_ == null ? io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats.getDefaultInstance() : stats_;
  }
  /**
   * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats stats = 7;</code>
   */
  @java.lang.Override
  public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStatsOrBuilder getStatsOrBuilder() {
    return stats_ == null ? io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats.getDefaultInstance() : stats_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (consumerFactory_ != 0) {
      output.writeInt32(1, consumerFactory_);
    }
    if (consumerId_ != 0) {
      output.writeInt32(2, consumerId_);
    }
    if (bootstrapServers_ != 0) {
      output.writeInt32(3, bootstrapServers_);
    }
    if (consumerGroup_ != 0) {
      output.writeInt32(4, consumerGroup_);
    }
    if (getTopicsList().size() > 0) {
      output.writeUInt32NoTag(42);
      output.writeUInt32NoTag(topicsMemoizedSerializedSize);
    }
    for (int i = 0; i < topics_.size(); i++) {
      output.writeInt32NoTag(topics_.getInt(i));
    }
    com.google.protobuf.GeneratedMessage
      .serializeIntegerMapTo(
        output,
        internalGetPartitions(),
        PartitionsDefaultEntryHolder.defaultEntry,
        6);
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(7, getStats());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (consumerFactory_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, consumerFactory_);
    }
    if (consumerId_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, consumerId_);
    }
    if (bootstrapServers_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, bootstrapServers_);
    }
    if (consumerGroup_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, consumerGroup_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < topics_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(topics_.getInt(i));
      }
      size += dataSize;
      if (!getTopicsList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      topicsMemoizedSerializedSize = dataSize;
    }
    for (java.util.Map.Entry<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets> entry
         : internalGetPartitions().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets>
      partitions__ = PartitionsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, partitions__);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getStats());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer)) {
      return super.equals(obj);
    }
    io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer other = (io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer) obj;

    if (getConsumerFactory()
        != other.getConsumerFactory()) return false;
    if (getConsumerId()
        != other.getConsumerId()) return false;
    if (getBootstrapServers()
        != other.getBootstrapServers()) return false;
    if (getConsumerGroup()
        != other.getConsumerGroup()) return false;
    if (!getTopicsList()
        .equals(other.getTopicsList())) return false;
    if (!internalGetPartitions().equals(
        other.internalGetPartitions())) return false;
    if (hasStats() != other.hasStats()) return false;
    if (hasStats()) {
      if (!getStats()
          .equals(other.getStats())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + CONSUMER_FACTORY_FIELD_NUMBER;
    hash = (53 * hash) + getConsumerFactory();
    hash = (37 * hash) + CONSUMER_ID_FIELD_NUMBER;
    hash = (53 * hash) + getConsumerId();
    hash = (37 * hash) + BOOTSTRAP_SERVERS_FIELD_NUMBER;
    hash = (53 * hash) + getBootstrapServers();
    hash = (37 * hash) + CONSUMER_GROUP_FIELD_NUMBER;
    hash = (53 * hash) + getConsumerGroup();
    if (getTopicsCount() > 0) {
      hash = (37 * hash) + TOPICS_FIELD_NUMBER;
      hash = (53 * hash) + getTopicsList().hashCode();
    }
    if (!internalGetPartitions().getMap().isEmpty()) {
      hash = (37 * hash) + PARTITIONS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetPartitions().hashCode();
    }
    if (hasStats()) {
      hash = (37 * hash) + STATS_FIELD_NUMBER;
      hash = (53 * hash) + getStats().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer)
      io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerOuterClass.internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumer_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
        int number) {
      switch (number) {
        case 6:
          return internalGetPartitions();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMutableMapFieldReflection(
        int number) {
      switch (number) {
        case 6:
          return internalGetMutablePartitions();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerOuterClass.internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer.class, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer.Builder.class);
    }

    // Construct using io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getStatsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      consumerFactory_ = 0;
      consumerId_ = 0;
      bootstrapServers_ = 0;
      consumerGroup_ = 0;
      topics_ = emptyIntList();
      internalGetMutablePartitions().clear();
      stats_ = null;
      if (statsBuilder_ != null) {
        statsBuilder_.dispose();
        statsBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerOuterClass.internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumer_descriptor;
    }

    @java.lang.Override
    public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer getDefaultInstanceForType() {
      return io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer.getDefaultInstance();
    }

    @java.lang.Override
    public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer build() {
      io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer buildPartial() {
      io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer result = new io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.consumerFactory_ = consumerFactory_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.consumerId_ = consumerId_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.bootstrapServers_ = bootstrapServers_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.consumerGroup_ = consumerGroup_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        topics_.makeImmutable();
        result.topics_ = topics_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.partitions_ = internalGetPartitions().build(PartitionsDefaultEntryHolder.defaultEntry);
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.stats_ = statsBuilder_ == null
            ? stats_
            : statsBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer) {
        return mergeFrom((io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer other) {
      if (other == io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer.getDefaultInstance()) return this;
      if (other.getConsumerFactory() != 0) {
        setConsumerFactory(other.getConsumerFactory());
      }
      if (other.getConsumerId() != 0) {
        setConsumerId(other.getConsumerId());
      }
      if (other.getBootstrapServers() != 0) {
        setBootstrapServers(other.getBootstrapServers());
      }
      if (other.getConsumerGroup() != 0) {
        setConsumerGroup(other.getConsumerGroup());
      }
      if (!other.topics_.isEmpty()) {
        if (topics_.isEmpty()) {
          topics_ = other.topics_;
          topics_.makeImmutable();
          bitField0_ |= 0x00000010;
        } else {
          ensureTopicsIsMutable();
          topics_.addAll(other.topics_);
        }
        onChanged();
      }
      internalGetMutablePartitions().mergeFrom(
          other.internalGetPartitions());
      bitField0_ |= 0x00000020;
      if (other.hasStats()) {
        mergeStats(other.getStats());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              consumerFactory_ = input.readInt32();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              consumerId_ = input.readInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              bootstrapServers_ = input.readInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 32: {
              consumerGroup_ = input.readInt32();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              int v = input.readInt32();
              ensureTopicsIsMutable();
              topics_.addInt(v);
              break;
            } // case 40
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureTopicsIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                topics_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            } // case 42
            case 50: {
              com.google.protobuf.MapEntry<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets>
              partitions__ = input.readMessage(
                  PartitionsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutablePartitions().ensureBuilderMap().put(
                  partitions__.getKey(), partitions__.getValue());
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getStatsFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000040;
              break;
            } // case 58
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int consumerFactory_ ;
    /**
     * <code>int32 consumer_factory = 1;</code>
     * @return The consumerFactory.
     */
    @java.lang.Override
    public int getConsumerFactory() {
      return consumerFactory_;
    }
    /**
     * <code>int32 consumer_factory = 1;</code>
     * @param value The consumerFactory to set.
     * @return This builder for chaining.
     */
    public Builder setConsumerFactory(int value) {

      consumerFactory_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>int32 consumer_factory = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearConsumerFactory() {
      bitField0_ = (bitField0_ & ~0x00000001);
      consumerFactory_ = 0;
      onChanged();
      return this;
    }

    private int consumerId_ ;
    /**
     * <code>int32 consumer_id = 2;</code>
     * @return The consumerId.
     */
    @java.lang.Override
    public int getConsumerId() {
      return consumerId_;
    }
    /**
     * <code>int32 consumer_id = 2;</code>
     * @param value The consumerId to set.
     * @return This builder for chaining.
     */
    public Builder setConsumerId(int value) {

      consumerId_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>int32 consumer_id = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearConsumerId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      consumerId_ = 0;
      onChanged();
      return this;
    }

    private int bootstrapServers_ ;
    /**
     * <code>int32 bootstrap_servers = 3;</code>
     * @return The bootstrapServers.
     */
    @java.lang.Override
    public int getBootstrapServers() {
      return bootstrapServers_;
    }
    /**
     * <code>int32 bootstrap_servers = 3;</code>
     * @param value The bootstrapServers to set.
     * @return This builder for chaining.
     */
    public Builder setBootstrapServers(int value) {

      bootstrapServers_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>int32 bootstrap_servers = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearBootstrapServers() {
      bitField0_ = (bitField0_ & ~0x00000004);
      bootstrapServers_ = 0;
      onChanged();
      return this;
    }

    private int consumerGroup_ ;
    /**
     * <code>int32 consumer_group = 4;</code>
     * @return The consumerGroup.
     */
    @java.lang.Override
    public int getConsumerGroup() {
      return consumerGroup_;
    }
    /**
     * <code>int32 consumer_group = 4;</code>
     * @param value The consumerGroup to set.
     * @return This builder for chaining.
     */
    public Builder setConsumerGroup(int value) {

      consumerGroup_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <code>int32 consumer_group = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearConsumerGroup() {
      bitField0_ = (bitField0_ & ~0x00000008);
      consumerGroup_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList topics_ = emptyIntList();
    private void ensureTopicsIsMutable() {
      if (!topics_.isModifiable()) {
        topics_ = makeMutableCopy(topics_);
      }
      bitField0_ |= 0x00000010;
    }
    /**
     * <code>repeated int32 topics = 5;</code>
     * @return A list containing the topics.
     */
    public java.util.List<java.lang.Integer>
        getTopicsList() {
      topics_.makeImmutable();
      return topics_;
    }
    /**
     * <code>repeated int32 topics = 5;</code>
     * @return The count of topics.
     */
    public int getTopicsCount() {
      return topics_.size();
    }
    /**
     * <code>repeated int32 topics = 5;</code>
     * @param index The index of the element to return.
     * @return The topics at the given index.
     */
    public int getTopics(int index) {
      return topics_.getInt(index);
    }
    /**
     * <code>repeated int32 topics = 5;</code>
     * @param index The index to set the value at.
     * @param value The topics to set.
     * @return This builder for chaining.
     */
    public Builder setTopics(
        int index, int value) {

      ensureTopicsIsMutable();
      topics_.setInt(index, value);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 topics = 5;</code>
     * @param value The topics to add.
     * @return This builder for chaining.
     */
    public Builder addTopics(int value) {

      ensureTopicsIsMutable();
      topics_.addInt(value);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 topics = 5;</code>
     * @param values The topics to add.
     * @return This builder for chaining.
     */
    public Builder addAllTopics(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureTopicsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, topics_);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 topics = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearTopics() {
      topics_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }

    private static final class PartitionsConverter implements com.google.protobuf.MapFieldBuilder.Converter<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsetsOrBuilder, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets> {
      @java.lang.Override
      public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets build(io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsetsOrBuilder val) {
        if (val instanceof io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets) { return (io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets) val; }
        return ((io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets.Builder) val).build();
      }

      @java.lang.Override
      public com.google.protobuf.MapEntry<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets> defaultEntry() {
        return PartitionsDefaultEntryHolder.defaultEntry;
      }
    };
    private static final PartitionsConverter partitionsConverter = new PartitionsConverter();

    private com.google.protobuf.MapFieldBuilder<
        java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsetsOrBuilder, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets.Builder> partitions_;
    private com.google.protobuf.MapFieldBuilder<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsetsOrBuilder, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets.Builder>
        internalGetPartitions() {
      if (partitions_ == null) {
        return new com.google.protobuf.MapFieldBuilder<>(partitionsConverter);
      }
      return partitions_;
    }
    private com.google.protobuf.MapFieldBuilder<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsetsOrBuilder, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets.Builder>
        internalGetMutablePartitions() {
      if (partitions_ == null) {
        partitions_ = new com.google.protobuf.MapFieldBuilder<>(partitionsConverter);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return partitions_;
    }
    public int getPartitionsCount() {
      return internalGetPartitions().ensureBuilderMap().size();
    }
    /**
     * <code>map&lt;int32, .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets&gt; partitions = 6;</code>
     */
    @java.lang.Override
    public boolean containsPartitions(
        int key) {

      return internalGetPartitions().ensureBuilderMap().containsKey(key);
    }
    /**
     * Use {@link #getPartitionsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets> getPartitions() {
      return getPartitionsMap();
    }
    /**
     * <code>map&lt;int32, .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets&gt; partitions = 6;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets> getPartitionsMap() {
      return internalGetPartitions().getImmutableMap();
    }
    /**
     * <code>map&lt;int32, .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets&gt; partitions = 6;</code>
     */
    @java.lang.Override
    public /* nullable */
io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets getPartitionsOrDefault(
        int key,
        /* nullable */
io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets defaultValue) {

      java.util.Map<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsetsOrBuilder> map = internalGetMutablePartitions().ensureBuilderMap();
      return map.containsKey(key) ? partitionsConverter.build(map.get(key)) : defaultValue;
    }
    /**
     * <code>map&lt;int32, .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets&gt; partitions = 6;</code>
     */
    @java.lang.Override
    public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets getPartitionsOrThrow(
        int key) {

      java.util.Map<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsetsOrBuilder> map = internalGetMutablePartitions().ensureBuilderMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return partitionsConverter.build(map.get(key));
    }
    public Builder clearPartitions() {
      bitField0_ = (bitField0_ & ~0x00000020);
      internalGetMutablePartitions().clear();
      return this;
    }
    /**
     * <code>map&lt;int32, .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets&gt; partitions = 6;</code>
     */
    public Builder removePartitions(
        int key) {

      internalGetMutablePartitions().ensureBuilderMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets>
        getMutablePartitions() {
      bitField0_ |= 0x00000020;
      return internalGetMutablePartitions().ensureMessageMap();
    }
    /**
     * <code>map&lt;int32, .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets&gt; partitions = 6;</code>
     */
    public Builder putPartitions(
        int key,
        io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets value) {

      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutablePartitions().ensureBuilderMap()
          .put(key, value);
      bitField0_ |= 0x00000020;
      return this;
    }
    /**
     * <code>map&lt;int32, .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets&gt; partitions = 6;</code>
     */
    public Builder putAllPartitions(
        java.util.Map<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets> values) {
      for (java.util.Map.Entry<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets> e : values.entrySet()) {
        if (e.getKey() == null || e.getValue() == null) {
          throw new NullPointerException();
        }
      }
      internalGetMutablePartitions().ensureBuilderMap()
          .putAll(values);
      bitField0_ |= 0x00000020;
      return this;
    }
    /**
     * <code>map&lt;int32, .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets&gt; partitions = 6;</code>
     */
    public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets.Builder putPartitionsBuilderIfAbsent(
        int key) {
      java.util.Map<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsetsOrBuilder> builderMap = internalGetMutablePartitions().ensureBuilderMap();
      io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsetsOrBuilder entry = builderMap.get(key);
      if (entry == null) {
        entry = io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets.newBuilder();
        builderMap.put(key, entry);
      }
      if (entry instanceof io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets) {
        entry = ((io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets) entry).toBuilder();
        builderMap.put(key, entry);
      }
      return (io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets.Builder) entry;
    }

    private io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats stats_;
    private com.google.protobuf.SingleFieldBuilder<
        io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats.Builder, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStatsOrBuilder> statsBuilder_;
    /**
     * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats stats = 7;</code>
     * @return Whether the stats field is set.
     */
    public boolean hasStats() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats stats = 7;</code>
     * @return The stats.
     */
    public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats getStats() {
      if (statsBuilder_ == null) {
        return stats_ == null ? io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats.getDefaultInstance() : stats_;
      } else {
        return statsBuilder_.getMessage();
      }
    }
    /**
     * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats stats = 7;</code>
     */
    public Builder setStats(io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats value) {
      if (statsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        stats_ = value;
      } else {
        statsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats stats = 7;</code>
     */
    public Builder setStats(
        io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats.Builder builderForValue) {
      if (statsBuilder_ == null) {
        stats_ = builderForValue.build();
      } else {
        statsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats stats = 7;</code>
     */
    public Builder mergeStats(io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats value) {
      if (statsBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0) &&
          stats_ != null &&
          stats_ != io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats.getDefaultInstance()) {
          getStatsBuilder().mergeFrom(value);
        } else {
          stats_ = value;
        }
      } else {
        statsBuilder_.mergeFrom(value);
      }
      if (stats_ != null) {
        bitField0_ |= 0x00000040;
        onChanged();
      }
      return this;
    }
    /**
     * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats stats = 7;</code>
     */
    public Builder clearStats() {
      bitField0_ = (bitField0_ & ~0x00000040);
      stats_ = null;
      if (statsBuilder_ != null) {
        statsBuilder_.dispose();
        statsBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats stats = 7;</code>
     */
    public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats.Builder getStatsBuilder() {
      bitField0_ |= 0x00000040;
      onChanged();
      return getStatsFieldBuilder().getBuilder();
    }
    /**
     * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats stats = 7;</code>
     */
    public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStatsOrBuilder getStatsOrBuilder() {
      if (statsBuilder_ != null) {
        return statsBuilder_.getMessageOrBuilder();
      } else {
        return stats_ == null ?
            io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats.getDefaultInstance() : stats_;
      }
    }
    /**
     * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats stats = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats.Builder, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStatsOrBuilder> 
        getStatsFieldBuilder() {
      if (statsBuilder_ == null) {
        statsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats.Builder, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStatsOrBuilder>(
                getStats(),
                getParentForChildren(),
                isClean());
        stats_ = null;
      }
      return statsBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer)
  }

  // @@protoc_insertion_point(class_scope:io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer)
  private static final io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer();
  }

  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<KafkaConsumer>
      PARSER = new com.google.protobuf.AbstractParser<KafkaConsumer>() {
    @java.lang.Override
    public KafkaConsumer parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<KafkaConsumer> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<KafkaConsumer> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

