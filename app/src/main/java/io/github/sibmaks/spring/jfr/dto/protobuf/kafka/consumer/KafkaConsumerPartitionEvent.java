// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kafka.consumer.proto
// Protobuf Java Version: 4.29.3

package io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer;

/**
 * Protobuf type {@code io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent}
 */
public final class KafkaConsumerPartitionEvent extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent)
    KafkaConsumerPartitionEventOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      KafkaConsumerPartitionEvent.class.getName());
  }
  // Use KafkaConsumerPartitionEvent.newBuilder() to construct.
  private KafkaConsumerPartitionEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private KafkaConsumerPartitionEvent() {
    eventType_ = 0;
    partitions_ = emptyIntList();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerOuterClass.internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumerPartitionEvent_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerOuterClass.internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumerPartitionEvent_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent.class, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent.Builder.class);
  }

  public static final int EVENTTYPE_FIELD_NUMBER = 1;
  private int eventType_ = 0;
  /**
   * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType eventType = 1;</code>
   * @return The enum numeric value on the wire for eventType.
   */
  @java.lang.Override public int getEventTypeValue() {
    return eventType_;
  }
  /**
   * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType eventType = 1;</code>
   * @return The eventType.
   */
  @java.lang.Override public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType getEventType() {
    io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType result = io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType.forNumber(eventType_);
    return result == null ? io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType.UNRECOGNIZED : result;
  }

  public static final int PARTITIONS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.IntList partitions_ =
      emptyIntList();
  /**
   * <code>repeated int32 partitions = 2;</code>
   * @return A list containing the partitions.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getPartitionsList() {
    return partitions_;
  }
  /**
   * <code>repeated int32 partitions = 2;</code>
   * @return The count of partitions.
   */
  public int getPartitionsCount() {
    return partitions_.size();
  }
  /**
   * <code>repeated int32 partitions = 2;</code>
   * @param index The index of the element to return.
   * @return The partitions at the given index.
   */
  public int getPartitions(int index) {
    return partitions_.getInt(index);
  }
  private int partitionsMemoizedSerializedSize = -1;

  public static final int AT_FIELD_NUMBER = 3;
  private long at_ = 0L;
  /**
   * <code>int64 at = 3;</code>
   * @return The at.
   */
  @java.lang.Override
  public long getAt() {
    return at_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (eventType_ != io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType.REVOKED.getNumber()) {
      output.writeEnum(1, eventType_);
    }
    if (getPartitionsList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(partitionsMemoizedSerializedSize);
    }
    for (int i = 0; i < partitions_.size(); i++) {
      output.writeInt32NoTag(partitions_.getInt(i));
    }
    if (at_ != 0L) {
      output.writeInt64(3, at_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (eventType_ != io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType.REVOKED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, eventType_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < partitions_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(partitions_.getInt(i));
      }
      size += dataSize;
      if (!getPartitionsList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      partitionsMemoizedSerializedSize = dataSize;
    }
    if (at_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(3, at_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent)) {
      return super.equals(obj);
    }
    io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent other = (io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent) obj;

    if (eventType_ != other.eventType_) return false;
    if (!getPartitionsList()
        .equals(other.getPartitionsList())) return false;
    if (getAt()
        != other.getAt()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + EVENTTYPE_FIELD_NUMBER;
    hash = (53 * hash) + eventType_;
    if (getPartitionsCount() > 0) {
      hash = (37 * hash) + PARTITIONS_FIELD_NUMBER;
      hash = (53 * hash) + getPartitionsList().hashCode();
    }
    hash = (37 * hash) + AT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getAt());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent)
      io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerOuterClass.internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumerPartitionEvent_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerOuterClass.internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumerPartitionEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent.class, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent.Builder.class);
    }

    // Construct using io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      eventType_ = 0;
      partitions_ = emptyIntList();
      at_ = 0L;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerOuterClass.internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumerPartitionEvent_descriptor;
    }

    @java.lang.Override
    public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent getDefaultInstanceForType() {
      return io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent.getDefaultInstance();
    }

    @java.lang.Override
    public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent build() {
      io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent buildPartial() {
      io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent result = new io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.eventType_ = eventType_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        partitions_.makeImmutable();
        result.partitions_ = partitions_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.at_ = at_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent) {
        return mergeFrom((io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent other) {
      if (other == io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent.getDefaultInstance()) return this;
      if (other.eventType_ != 0) {
        setEventTypeValue(other.getEventTypeValue());
      }
      if (!other.partitions_.isEmpty()) {
        if (partitions_.isEmpty()) {
          partitions_ = other.partitions_;
          partitions_.makeImmutable();
          bitField0_ |= 0x00000002;
        } else {
          ensurePartitionsIsMutable();
          partitions_.addAll(other.partitions_);
        }
        onChanged();
      }
      if (other.getAt() != 0L) {
        setAt(other.getAt());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              eventType_ = input.readEnum();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              int v = input.readInt32();
              ensurePartitionsIsMutable();
              partitions_.addInt(v);
              break;
            } // case 16
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensurePartitionsIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                partitions_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            } // case 18
            case 24: {
              at_ = input.readInt64();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int eventType_ = 0;
    /**
     * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType eventType = 1;</code>
     * @return The enum numeric value on the wire for eventType.
     */
    @java.lang.Override public int getEventTypeValue() {
      return eventType_;
    }
    /**
     * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType eventType = 1;</code>
     * @param value The enum numeric value on the wire for eventType to set.
     * @return This builder for chaining.
     */
    public Builder setEventTypeValue(int value) {
      eventType_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType eventType = 1;</code>
     * @return The eventType.
     */
    @java.lang.Override
    public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType getEventType() {
      io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType result = io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType.forNumber(eventType_);
      return result == null ? io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType.UNRECOGNIZED : result;
    }
    /**
     * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType eventType = 1;</code>
     * @param value The eventType to set.
     * @return This builder for chaining.
     */
    public Builder setEventType(io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      eventType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventType eventType = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearEventType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      eventType_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList partitions_ = emptyIntList();
    private void ensurePartitionsIsMutable() {
      if (!partitions_.isModifiable()) {
        partitions_ = makeMutableCopy(partitions_);
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>repeated int32 partitions = 2;</code>
     * @return A list containing the partitions.
     */
    public java.util.List<java.lang.Integer>
        getPartitionsList() {
      partitions_.makeImmutable();
      return partitions_;
    }
    /**
     * <code>repeated int32 partitions = 2;</code>
     * @return The count of partitions.
     */
    public int getPartitionsCount() {
      return partitions_.size();
    }
    /**
     * <code>repeated int32 partitions = 2;</code>
     * @param index The index of the element to return.
     * @return The partitions at the given index.
     */
    public int getPartitions(int index) {
      return partitions_.getInt(index);
    }
    /**
     * <code>repeated int32 partitions = 2;</code>
     * @param index The index to set the value at.
     * @param value The partitions to set.
     * @return This builder for chaining.
     */
    public Builder setPartitions(
        int index, int value) {

      ensurePartitionsIsMutable();
      partitions_.setInt(index, value);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 partitions = 2;</code>
     * @param value The partitions to add.
     * @return This builder for chaining.
     */
    public Builder addPartitions(int value) {

      ensurePartitionsIsMutable();
      partitions_.addInt(value);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 partitions = 2;</code>
     * @param values The partitions to add.
     * @return This builder for chaining.
     */
    public Builder addAllPartitions(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensurePartitionsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, partitions_);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 partitions = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearPartitions() {
      partitions_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    private long at_ ;
    /**
     * <code>int64 at = 3;</code>
     * @return The at.
     */
    @java.lang.Override
    public long getAt() {
      return at_;
    }
    /**
     * <code>int64 at = 3;</code>
     * @param value The at to set.
     * @return This builder for chaining.
     */
    public Builder setAt(long value) {

      at_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>int64 at = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearAt() {
      bitField0_ = (bitField0_ & ~0x00000004);
      at_ = 0L;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent)
  }

  // @@protoc_insertion_point(class_scope:io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent)
  private static final io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent();
  }

  public static io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<KafkaConsumerPartitionEvent>
      PARSER = new com.google.protobuf.AbstractParser<KafkaConsumerPartitionEvent>() {
    @java.lang.Override
    public KafkaConsumerPartitionEvent parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<KafkaConsumerPartitionEvent> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<KafkaConsumerPartitionEvent> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

