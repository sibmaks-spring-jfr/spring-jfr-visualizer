// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kafka.consumer.proto
// Protobuf Java Version: 4.29.3

package io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer;

public interface KafkaConsumerOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumer)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>int32 consumer_factory = 1;</code>
   * @return The consumerFactory.
   */
  int getConsumerFactory();

  /**
   * <code>int32 consumer_id = 2;</code>
   * @return The consumerId.
   */
  int getConsumerId();

  /**
   * <code>int32 bootstrap_servers = 3;</code>
   * @return The bootstrapServers.
   */
  int getBootstrapServers();

  /**
   * <code>int32 consumer_group = 4;</code>
   * @return The consumerGroup.
   */
  int getConsumerGroup();

  /**
   * <code>repeated int32 topics = 5;</code>
   * @return A list containing the topics.
   */
  java.util.List<java.lang.Integer> getTopicsList();
  /**
   * <code>repeated int32 topics = 5;</code>
   * @return The count of topics.
   */
  int getTopicsCount();
  /**
   * <code>repeated int32 topics = 5;</code>
   * @param index The index of the element to return.
   * @return The topics at the given index.
   */
  int getTopics(int index);

  /**
   * <code>map&lt;int32, .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets&gt; partitions = 6;</code>
   */
  int getPartitionsCount();
  /**
   * <code>map&lt;int32, .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets&gt; partitions = 6;</code>
   */
  boolean containsPartitions(
      int key);
  /**
   * Use {@link #getPartitionsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets>
  getPartitions();
  /**
   * <code>map&lt;int32, .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets&gt; partitions = 6;</code>
   */
  java.util.Map<java.lang.Integer, io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets>
  getPartitionsMap();
  /**
   * <code>map&lt;int32, .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets&gt; partitions = 6;</code>
   */
  /* nullable */
io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets getPartitionsOrDefault(
      int key,
      /* nullable */
io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets defaultValue);
  /**
   * <code>map&lt;int32, .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets&gt; partitions = 6;</code>
   */
  io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.PartitionOffsets getPartitionsOrThrow(
      int key);

  /**
   * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats stats = 7;</code>
   * @return Whether the stats field is set.
   */
  boolean hasStats();
  /**
   * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats stats = 7;</code>
   * @return The stats.
   */
  io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats getStats();
  /**
   * <code>.io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStats stats = 7;</code>
   */
  io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerStatsOrBuilder getStatsOrBuilder();

  /**
   * <code>repeated .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent partitionsEvents = 8;</code>
   */
  java.util.List<io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent> 
      getPartitionsEventsList();
  /**
   * <code>repeated .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent partitionsEvents = 8;</code>
   */
  io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent getPartitionsEvents(int index);
  /**
   * <code>repeated .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent partitionsEvents = 8;</code>
   */
  int getPartitionsEventsCount();
  /**
   * <code>repeated .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent partitionsEvents = 8;</code>
   */
  java.util.List<? extends io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventOrBuilder> 
      getPartitionsEventsOrBuilderList();
  /**
   * <code>repeated .io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEvent partitionsEvents = 8;</code>
   */
  io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer.KafkaConsumerPartitionEventOrBuilder getPartitionsEventsOrBuilder(
      int index);
}
