// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kafka.consumer.proto
// Protobuf Java Version: 4.29.3

package io.github.sibmaks.spring.jfr.dto.protobuf.kafka.consumer;

public final class KafkaConsumerOuterClass {
  private KafkaConsumerOuterClass() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      KafkaConsumerOuterClass.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_PartitionOffsets_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_PartitionOffsets_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumerStats_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumerStats_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumer_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumer_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumer_PartitionsEntry_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumer_PartitionsEntry_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersMap_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersMap_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersMap_ConsumersEntry_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersMap_ConsumersEntry_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersReport_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersReport_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersReport_ContextsEntry_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersReport_ContextsEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024kafka.consumer.proto\0228io.github.sibmak" +
      "s.spring.jfr.dto.protobuf.kafka.consumer" +
      "\"?\n\020PartitionOffsets\022\026\n\016current_offset\030\001" +
      " \001(\003\022\023\n\013last_commit\030\002 \001(\003\"e\n\022KafkaConsum" +
      "erStats\022\017\n\007commits\030\001 \001(\005\022\020\n\010commited\030\002 \001" +
      "(\005\022\024\n\014commitFailed\030\003 \001(\005\022\026\n\016last_commit_" +
      "at\030\004 \001(\003\"\312\003\n\rKafkaConsumer\022\030\n\020consumer_f" +
      "actory\030\001 \001(\005\022\023\n\013consumer_id\030\002 \001(\005\022\031\n\021boo" +
      "tstrap_servers\030\003 \001(\005\022\026\n\016consumer_group\030\004" +
      " \001(\005\022\016\n\006topics\030\005 \003(\005\022k\n\npartitions\030\006 \003(\013" +
      "2W.io.github.sibmaks.spring.jfr.dto.prot" +
      "obuf.kafka.consumer.KafkaConsumer.Partit" +
      "ionsEntry\022[\n\005stats\030\007 \001(\0132L.io.github.sib" +
      "maks.spring.jfr.dto.protobuf.kafka.consu" +
      "mer.KafkaConsumerStats\032}\n\017PartitionsEntr" +
      "y\022\013\n\003key\030\001 \001(\005\022Y\n\005value\030\002 \001(\0132J.io.githu" +
      "b.sibmaks.spring.jfr.dto.protobuf.kafka." +
      "consumer.PartitionOffsets:\0028\001\"\375\001\n\021KafkaC" +
      "onsumersMap\022m\n\tconsumers\030\001 \003(\0132Z.io.gith" +
      "ub.sibmaks.spring.jfr.dto.protobuf.kafka" +
      ".consumer.KafkaConsumersMap.ConsumersEnt" +
      "ry\032y\n\016ConsumersEntry\022\013\n\003key\030\001 \001(\005\022V\n\005val" +
      "ue\030\002 \001(\0132G.io.github.sibmaks.spring.jfr." +
      "dto.protobuf.kafka.consumer.KafkaConsume" +
      "r:\0028\001\"\204\002\n\024KafkaConsumersReport\022n\n\010contex" +
      "ts\030\001 \003(\0132\\.io.github.sibmaks.spring.jfr." +
      "dto.protobuf.kafka.consumer.KafkaConsume" +
      "rsReport.ContextsEntry\032|\n\rContextsEntry\022" +
      "\013\n\003key\030\001 \001(\005\022Z\n\005value\030\002 \001(\0132K.io.github." +
      "sibmaks.spring.jfr.dto.protobuf.kafka.co" +
      "nsumer.KafkaConsumersMap:\0028\001B<\n8io.githu" +
      "b.sibmaks.spring.jfr.dto.protobuf.kafka." +
      "consumerP\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_PartitionOffsets_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_PartitionOffsets_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_PartitionOffsets_descriptor,
        new java.lang.String[] { "CurrentOffset", "LastCommit", });
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumerStats_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumerStats_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumerStats_descriptor,
        new java.lang.String[] { "Commits", "Commited", "CommitFailed", "LastCommitAt", });
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumer_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumer_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumer_descriptor,
        new java.lang.String[] { "ConsumerFactory", "ConsumerId", "BootstrapServers", "ConsumerGroup", "Topics", "Partitions", "Stats", });
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumer_PartitionsEntry_descriptor =
      internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumer_descriptor.getNestedTypes().get(0);
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumer_PartitionsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumer_PartitionsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersMap_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersMap_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersMap_descriptor,
        new java.lang.String[] { "Consumers", });
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersMap_ConsumersEntry_descriptor =
      internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersMap_descriptor.getNestedTypes().get(0);
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersMap_ConsumersEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersMap_ConsumersEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersReport_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersReport_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersReport_descriptor,
        new java.lang.String[] { "Contexts", });
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersReport_ContextsEntry_descriptor =
      internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersReport_descriptor.getNestedTypes().get(0);
    internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersReport_ContextsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_github_sibmaks_spring_jfr_dto_protobuf_kafka_consumer_KafkaConsumersReport_ContextsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
